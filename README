CLONING OUR CODE:
	HTTP version
		git clone https://github.com/CMU-15-239/NavPalFloorplans.git
	SSH version
		git clone git@github.com:CMU-15-239/NavPalFloorplans.git

INSTALLATION:
	REQUIRED SYSTEM
		An ubuntu computer with version 12.04 or higher

	PIP -- for installing python modules
		sudo apt-get install python-pip

	Python Image Library -- used for image processing
		pip install pil

	Open CV -- used for image processing 
		sudo apt-get install libopencv-dev 

	Open CV python bindings
		sudo apt-get install python-opencv 

	Tesseract -- for OCR
		sudo apt-get install python-distutils-extra tesseract-ocr tesseract-ocr-eng libopencv-dev libtesseract-dev libleptonica-dev python-all-dev swig libcv-dev python-opencv python-numpy python-setuptools build-essential subversion
		svn checkout http://python-tesseract.googlecode.com/svn/trunk/ python-tesseract
		cd python-tesseract
		python config.py
		python setup.py clean
		python setup.py build
		sudo python setup.py install --user  

		check to see if this was successful:
			python
			import tesseract
		if an error occurred when importing tesseract then run these commands from python-tesseract directory
			sudo apt-get install cdbs dh-buildinfo devscripts python-stdeb
			./buildDeb
			Then in your file manager double click the deb file that was created to install via package manager

    
  Mongo Database -- for data storage
    http://docs.mongodb.org/manual/installation/ is the best guide and the installation process varies per distribution of linux.

	Node.js -- for the server
		Download node from http://nodejs.org/
		tar -zxf node-* cd node-*
		./configure make sudo make install
		NOTE: * should be replaced by the version of node downloaded

INPUT FILES:
	On the floor upload page we require that a building manager uploads the floor plans for their building. For Carnegie Mellon you can find pdf's of such images from http://www.cmu.edu/cdfd/building-floorplans/index.html. Convert the image within the pdf by either taking a screen shot (quick and dirty way) or by ....

OUTPUT FILES:
	During preprocessing a few temp files are generated by the server for image processing purposes. They are located within the Flow/server/temp/ but they are deleted promptly after they are read by the node server. However if there is a bug we do not delete the files, to help debug the error. 
  
DATABASE:
  Everything else is saved to the Mongo database used by the server. The Mongo Database can choosen based off the uri you use within server.js when constructing a new FlowDB. 

HOW TO RUN:
	Server
    Start the mongo database
      http://docs.mongodb.org/manual/installation/, this depends on your installation process.
      
      To connect to this mongo server open Flow/server/server.js and edit the connection string (e.g. 'mongodb://localhost:27017/flow') in new FlowDB(<connection string>) inside the init function.
      
      The format of the connection string is: mongodb://<ip address>:<port>/<database name>.
    
		Start within the cloned directory NavPalFloorplans/
      cd Flow/server/
      node server.js
  
	Website
		After the server is running, you can see the website at <ip address>:<port>/home.html
    The port can be set Flow/server/server.js, but is currently set to 8080.

FRONTEND:
	Each html page as a corresponding javascript file with functions specific to that page (with the exception of the home page which has no functionality whatsoever). Similarly, each page also has a corresponding css file with styles specific for that page. The naming scheme of these files are as follows
		example.html
		./js/example.js
		./css/example.css

	There are also some global javascript and stylesheets that are used on every page.

	Global javascript:
		./js/bootstrap/bootstrap.min.js
			-provides bootstrap with fancy dom functionality
		./js/jquery.js
			-for obvious reasons
	Global stylesheets:
		./css/global-styles.css
			-provides general look and feel of navpal sites
		./css/bootstrap.min.css
			-required by bootstrap
		./css/bootstrap-non-responsive.min.css
			-only used on authoringTool.html. Only difference between this and bootstrap.min.css is the removal of bootstrap's responsiveness becuase this breaks the look of the tool

FLOW OF EACH PAGE:
	home.html
		- n/a
	authentication.html
		- user generates request to server when loging in or registering. If successful they are redirected to the account page
	account.html
		- user's buildings are immediately pulled from server and are listed in a table on the page. The user can make a new building, edit an existing building, remove a building or change their password from this page
	floorUploads.html
		- user uploads any number of floorplans from upload button. Each floorplan has a thumbnail dynamically created. Then each floorplan is run through the preprocessor in seperate server requests. When the server is done preprocessing, the loading spinner is removed from the floorplan thumbnail. User's will then press done which generates a building object from the preprocessed data. The building object is saved into local storage and the user is redirected to authoringTool.html
	authoringTool.html
		- The building object is read from local storage and the canvas is initialized from this object. The carousels are populated by the images of floorplans of the building. A seperate request is made to the server to get each floor plan. When all images are fetched adn canvas is initialized, the loading spinner is removed so that the user can use the authoring tool

KNOWN BUGS: 
	Firefox specific bugs:
		mousewheel scrolling does not work
		landmarks sometimes do not save properly
		classifications do not save properly